#'
#' @param object  A fuzzy_forest object.
#' @param thresh  Threshold for interaction strength. Threshold should
#'                be between `0` and `1` where the higher values
#'                indicates strong interaction effects.
#' @param ...     Additional arguments not in use.
#' @return A dataframe of potential pairwise interactions
#'
#' @export
detect_interaction <- function(object, thresh) {
cat("Note: fastshap does not inherently calculate interaction. These are estimates. \n")
names <- object$final_SHAP[[1]]
shap <- object$shap_obj
shap_object <- shapviz(shap, X = object$final_X)
total_interactions <- list()
total_sig_interactions <- list()
for (p in 1:length(names)){
feat <- names[p]
interactions <- potential_interactions(shap_object, v = feat)
sig_interactions <- sapply(interactions, function(x) if (x > thresh) x else NA)
sig_interactions <- sig_interactions[!is.na(sig_interactions)]
if (length(sig_interactions) > 0) {
interactions_df <- data.frame(
FeatureA = feat,
FeatureB = names(sig_interactions),
Interaction_Strength = sig_interactions
)
total_sig_interactions[[feat]] <- interactions_df
}
interactions_df <- data.frame(
FeatureA = feat,
FeatureB = names(interactions),
Interaction_Strength = interactions
)
total_interactions[[feat]] <- interactions_df
}
all_interactions <- do.call(rbind, total_interactions)
all_interactions <- all_interactions %>%
mutate(pair = pmap(list(FeatureA, FeatureB), ~ {
pair <- sort(c(..1, ..2))
paste(pair, collapse = "-")
})) %>%
arrange(pair) %>%
distinct(pair, .keep_all = TRUE) %>%
select(-pair)
row.names(all_interactions) <- NULL
if (length(total_sig_interactions) > 0) {
potential_interactions <- do.call(rbind, total_sig_interactions)
potential_interactions <- potential_interactions %>%
mutate(pair = pmap(list(FeatureA, FeatureB), ~ {
pair <- sort(c(..1, ..2))
paste(pair, collapse = "-")
})) %>%
arrange(pair) %>%
distinct(pair, .keep_all = TRUE) %>%
select(-pair)
row.names(potential_interactions) <- NULL
print(potential_interactions)
} else {
print("No significant interactions found.")
}
return(all_interactions)
}
#' @param object  A fuzzy_forest object.
#' @param thresh  Threshold for interaction strength. Threshold should
#'                be between `0` and `1` where the higher values
#'                indicates strong interaction effects.
#' @param all     Returns all interaction. strength values
#'                Default is `FALSE`.
#' @param ...     Additional arguments not in use.
#' @return A dataframe of potential pairwise interactions
#'
#' @export
detect_interaction <- function(object, thresh, all=FALSE) {
cat("Note: fastshap does not inherently calculate interaction. These are estimates. \n")
names <- object$final_SHAP[[1]]
shap <- object$shap_obj
shap_object <- shapviz(shap, X = object$final_X)
total_interactions <- list()
total_sig_interactions <- list()
for (p in 1:length(names)){
feat <- names[p]
interactions <- potential_interactions(shap_object, v = feat)
sig_interactions <- sapply(interactions, function(x) if (x > thresh) x else NA)
sig_interactions <- sig_interactions[!is.na(sig_interactions)]
if (length(sig_interactions) > 0) {
interactions_df <- data.frame(
FeatureA = feat,
FeatureB = names(sig_interactions),
Interaction_Strength = sig_interactions
)
total_sig_interactions[[feat]] <- interactions_df
}
interactions_df <- data.frame(
FeatureA = feat,
FeatureB = names(interactions),
Interaction_Strength = interactions
)
total_interactions[[feat]] <- interactions_df
}
all_interactions <- do.call(rbind, total_interactions)
all_interactions <- all_interactions %>%
mutate(pair = pmap(list(FeatureA, FeatureB), ~ {
pair <- sort(c(..1, ..2))
paste(pair, collapse = "-")
})) %>%
arrange(pair) %>%
distinct(pair, .keep_all = TRUE) %>%
select(-pair)
row.names(all_interactions) <- NULL
if (length(total_sig_interactions) > 0) {
potential_interactions <- do.call(rbind, total_sig_interactions)
potential_interactions <- potential_interactions %>%
mutate(pair = pmap(list(FeatureA, FeatureB), ~ {
pair <- sort(c(..1, ..2))
paste(pair, collapse = "-")
})) %>%
arrange(pair) %>%
distinct(pair, .keep_all = TRUE) %>%
select(-pair)
row.names(potential_interactions) <- NULL
print(potential_interactions)
} else {
print("No significant interactions found.")
}
if (all == TRUE){
return(all_interactions)
}
}
detect_interaction(ff, 0.1)
all <- detect_interaction(ff, 0.1, all=TRUE)
all
interaction_data <- all
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
library(ggplot2)
# Create a symmetric matrix by expanding the data frame
interaction_matrix <- dcast(interaction_data, FeatureA ~ FeatureB, value.var = "Interaction_Strength")
interaction_matrix[lower.tri(interaction_matrix)] <- t(interaction_matrix)[lower.tri(interaction_matrix)]
# Melt the matrix back to long format
interaction_long <- melt(interaction_matrix, id.vars = "FeatureA")
# Create the heatmap
ggplot(interaction_long, aes(x = FeatureA, y = variable, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = median(interaction_long$value, na.rm = TRUE),
limit = c(min(interaction_long$value, na.rm = TRUE), max(interaction_long$value, na.rm = TRUE)),
space = "Lab", name="Interaction Strength") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x = "FeatureA", y = "FeatureB", title = "Interaction Strength Heatmap")
interaction_long
ggplot(interaction_data, aes(x = FeatureA, y = FeatureB, fill = Interaction_Strength)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = median(interaction_data$Interaction_Strength),
limit = c(min(interaction_data$Interaction_Strength), max(interaction_data$Interaction_Strength)),
space = "Lab", name="Interaction Strength") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x = "FeatureA", y = "FeatureB", title = "Interaction Strength Heatmap")
ggplot(interaction_data, aes(x = FeatureA, y = FeatureB, fill = Interaction_Strength)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Interaction_Strength, 3)), color = "black", size = 4) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = median(interaction_data$Interaction_Strength),
limit = c(min(interaction_data$Interaction_Strength), max(interaction_data$Interaction_Strength)),
space = "Lab", name="Interaction Strength") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x = "FeatureA", y = "FeatureB", title = "Interaction Strength Heatmap")
ggplot(interaction_data, aes(x = FeatureA, y = FeatureB, fill = Interaction_Strength)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Interaction_Strength, 3)), color = "black", size = 2) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = median(interaction_data$Interaction_Strength),
limit = c(min(interaction_data$Interaction_Strength), max(interaction_data$Interaction_Strength)),
space = "Lab", name="Interaction Strength") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x = "FeatureA", y = "FeatureB", title = "Interaction Strength Heatmap")
ggplot(interaction_data, aes(x = FeatureA, y = FeatureB, fill = Interaction_Strength)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Interaction_Strength, 3)), color = "black", size = 3) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = median(interaction_data$Interaction_Strength),
limit = c(min(interaction_data$Interaction_Strength), max(interaction_data$Interaction_Strength)),
space = "Lab", name="Interaction Strength") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x = "FeatureA", y = "FeatureB", title = "Interaction Strength Heatmap")
ggplot(interaction_data, aes(x = FeatureA, y = FeatureB, fill = Interaction_Strength)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Interaction_Strength, 3)), color = "black", size = 3) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = median(interaction_data$Interaction_Strength),
limit = c(min(interaction_data$Interaction_Strength), max(interaction_data$Interaction_Strength)),
space = "Lab", name="Interaction Strength") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x = "FeatureA", y = "FeatureB", title = "Potential Interactions")
ggplot(interaction_data, aes(x = FeatureA, y = FeatureB, fill = Interaction_Strength)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Interaction_Strength, 3)), color = "black", size = 3) +
scale_fill_gradient2(low = "#233e6c", high = "#680e29", mid = "white", midpoint = median(interaction_data$Interaction_Strength),
limit = c(min(interaction_data$Interaction_Strength), max(interaction_data$Interaction_Strength)),
space = "Lab", name="Interaction Strength") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x = "FeatureA", y = "FeatureB", title = "Potential Interactions")
ggplot(interaction_data, aes(x = FeatureA, y = FeatureB, fill = Interaction_Strength)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Interaction_Strength, 3)), color = "black", size = 3) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = median(interaction_data$Interaction_Strength),
limit = c(min(interaction_data$Interaction_Strength), max(interaction_data$Interaction_Strength)),
space = "Lab", name="Interaction Strength") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x = "FeatureA", y = "FeatureB", title = "Potential Interactions")
interaction_data
#' @param object  A fuzzy_forest object.
#' @param thresh  Threshold for interaction strength. Threshold should
#'                be between `0` and `1` where the higher values
#'                indicates strong interaction effects.
#' @param all     Returns all interaction. strength values
#'                Default is `FALSE`.
#' @param ...     Additional arguments not in use.
#' @return A dataframe of potential pairwise interactions
#'
#' @export
detect_interaction <- function(object, thresh, all=FALSE) {
cat("Note: fastshap does not inherently calculate interaction. These are estimates. \n")
names <- object$final_SHAP[[1]]
shap <- object$shap_obj
shap_object <- shapviz(shap, X = object$final_X)
total_interactions <- list()
total_sig_interactions <- list()
for (p in 1:length(names)){
feat <- names[p]
interactions <- potential_interactions(shap_object, v = feat)
sig_interactions <- sapply(interactions, function(x) if (x > thresh) x else NA)
sig_interactions <- sig_interactions[!is.na(sig_interactions)]
if (length(sig_interactions) > 0) {
interactions_df <- data.frame(
FeatureA = feat,
FeatureB = names(sig_interactions),
Interaction_Strength = sig_interactions
)
total_sig_interactions[[feat]] <- interactions_df
}
interactions_df <- data.frame(
FeatureA = feat,
FeatureB = names(interactions),
Interaction_Strength = interactions
)
total_interactions[[feat]] <- interactions_df
}
all_interactions <- do.call(rbind, total_interactions)
row.names(all_interactions) <- NULL
if (length(total_sig_interactions) > 0) {
potential_interactions <- do.call(rbind, total_sig_interactions)
potential_interactions <- potential_interactions %>%
mutate(pair = pmap(list(FeatureA, FeatureB), ~ {
pair <- sort(c(..1, ..2))
paste(pair, collapse = "-")
})) %>%
arrange(pair) %>%
distinct(pair, .keep_all = TRUE) %>%
select(-pair)
row.names(potential_interactions) <- NULL
print(potential_interactions)
} else {
print("No significant interactions found.")
}
if (all == TRUE){
return(all_interactions)
}
}
all <- detect_interaction(ff, 0.1, all=TRUE)
interaction_data <- all
ggplot(interaction_data, aes(x = FeatureA, y = FeatureB, fill = Interaction_Strength)) +
geom_tile(color = "white") +
geom_text(aes(label = round(Interaction_Strength, 3)), color = "black", size = 3) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = median(interaction_data$Interaction_Strength),
limit = c(min(interaction_data$Interaction_Strength), max(interaction_data$Interaction_Strength)),
space = "Lab", name="Interaction Strength") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x = "FeatureA", y = "FeatureB", title = "Potential Interactions")
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
library(devtools)
library(roxygen2)
setwd("./shapff")
document()
document()
rm(list = c("detect_interaction"))
document()
document()
document()
devtools::install_github("timothyshen213/shapff")
remove.packages("shapff")
devtools::install_github("timothyshen213/shapff")
detach("package:shapff", unload = TRUE)
remove.packages("shapff")
devtools::install_github("timothyshen213/shapff")
library(shapff)
plot_importance(ff, max_display = 5)
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
setwd("./shapff")
document()
document()
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
detach("package:shapff", unload = TRUE)
remove.packages("shapff")
devtools::install_github("timothyshen213/shapff")
library(shapff)
plot_importance(ff, max_display = 5)
plot_importance(ff)
detect_interaction(ff, 0.1, all=TRUE)
detect_interaction(ff, 0.1)
plot_importance(ff)
plot_force(ff, row_id=1)
row_name=NULL
is.character(row_name)
row_name !=NULL
plot_force(ff, row_id=1, row_name="two")
plot_waterfall(ff, row_id=1, row_name="two")
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
detach("package:shapff", unload = TRUE)
remove.packages("shapff")
devtools::install_github("timothyshen213/shapff")
id <- 1
set.seed(1)
rep_num <- 100
keep_frac <- c(0.01, 0.05, 0.1, 0.15, 0.25)
drop_frac <- c(0.05, 0.1, 0.25, 0.5)
mtry_factor <- c(0.5, 1, 2)
p <- c(100,1000)
n <- c(100)
param_list <- list(keep_frac, drop_frac, mtry_factor, p, n)
param_settings <- expand.grid(param_list)
param_settings <- param_settings[, 5:1]
names(param_settings) <- c("n", "p", "mtry_factor", "drop_fraction", "keep_fraction")
current_sim_params <- param_settings[ceiling((id)/rep_num), ]
sim_number <- 5
sim_results <- list()
sim_mod <- function(n, p, corr) {
sigma <- matrix(corr, nrow = p, ncol = p)
diag(sigma) <- 1
X <- rmvnorm(n, sigma = sigma)
return(X)
}
n <- as.numeric(current_sim_params[1])
p <- as.numeric(current_sim_params[2])
mtry_factor <- as.numeric(current_sim_params[3])
keep_fraction <- as.numeric(current_sim_params[4])
drop_fraction <- as.numeric(current_sim_params[5])
corr <- 0.8
if (p == 100) {
number_of_groups <- 4
number_of_mods <- number_of_groups - 1
p_per_group <- p/number_of_groups
vim_list <- c(1:3, 76:78)
vim_interest <- c(1:4, 76:79)
beta_list <- rep(c(5, 5, 2), 2)
}
if (p == 1000) {
number_of_groups <- 10
number_of_mods <- number_of_groups - 1
p_per_group <- p/number_of_groups
vim_list <- c(1:3, 901:903)
vim_interest <- c(1:4, 901:904)
beta_list <- rep(c(5, 5, 2), 2)
}
runtime <- system.time({
all_modules <- lapply(1:number_of_mods, function(j) sim_mod(n, p_per_group, corr))
all_modules[[number_of_groups]] <- matrix(rnorm(p_per_group * n), nrow = n, ncol = p_per_group)
X <- do.call(cbind, all_modules)
beta <- rep(0, p_per_group * (number_of_mods + 1))
beta[vim_list] <- beta_list
y <- X %*% beta + rnorm(n, sd = 0.1)
X <- as.data.frame(X)
names(X) <- paste("V", 1:p, sep = "")
mtry_factor <- 1
screen_params <- screen_control(drop_fraction = drop_fraction, keep_fraction = keep_fraction,
mtry_factor = mtry_factor)
select_params <- select_control(number_selected = 10, drop_fraction = drop_fraction,
mtry_factor = mtry_factor)
y <- as.numeric(y)
ff <- shapwff(X, y, shap_model = 0, screen_params = screen_params, select_params = select_params,
num_processors = 1, nodesize = 1)
})
plot_importance(ff)
plot_waterfall(ff, row_id=1)
plot_force(ff, row_id=1)
library(randomForest)
library(fastshap)
library(shapviz)
library(dplyr)
library(purrr)
library(reshape2)
library(ggplot2)
library(WGCNA)
library(fuzzyforest)
library(mvtnorm)
library(shapff)
id <- 1
set.seed(1)
rep_num <- 100
keep_frac <- c(0.01, 0.05, 0.1, 0.15, 0.25)
drop_frac <- c(0.05, 0.1, 0.25, 0.5)
mtry_factor <- c(0.5, 1, 2)
p <- c(100,1000)
n <- c(100)
param_list <- list(keep_frac, drop_frac, mtry_factor, p, n)
param_settings <- expand.grid(param_list)
param_settings <- param_settings[, 5:1]
names(param_settings) <- c("n", "p", "mtry_factor", "drop_fraction", "keep_fraction")
current_sim_params <- param_settings[ceiling((id)/rep_num), ]
sim_number <- 5
sim_results <- list()
sim_mod <- function(n, p, corr) {
sigma <- matrix(corr, nrow = p, ncol = p)
diag(sigma) <- 1
X <- rmvnorm(n, sigma = sigma)
return(X)
}
n <- as.numeric(current_sim_params[1])
p <- as.numeric(current_sim_params[2])
mtry_factor <- as.numeric(current_sim_params[3])
keep_fraction <- as.numeric(current_sim_params[4])
drop_fraction <- as.numeric(current_sim_params[5])
corr <- 0.8
if (p == 100) {
number_of_groups <- 4
number_of_mods <- number_of_groups - 1
p_per_group <- p/number_of_groups
vim_list <- c(1:3, 76:78)
vim_interest <- c(1:4, 76:79)
beta_list <- rep(c(5, 5, 2), 2)
}
if (p == 1000) {
number_of_groups <- 10
number_of_mods <- number_of_groups - 1
p_per_group <- p/number_of_groups
vim_list <- c(1:3, 901:903)
vim_interest <- c(1:4, 901:904)
beta_list <- rep(c(5, 5, 2), 2)
}
runtime <- system.time({
all_modules <- lapply(1:number_of_mods, function(j) sim_mod(n, p_per_group, corr))
all_modules[[number_of_groups]] <- matrix(rnorm(p_per_group * n), nrow = n, ncol = p_per_group)
X <- do.call(cbind, all_modules)
beta <- rep(0, p_per_group * (number_of_mods + 1))
beta[vim_list] <- beta_list
y <- X %*% beta + rnorm(n, sd = 0.1)
X <- as.data.frame(X)
names(X) <- paste("V", 1:p, sep = "")
mtry_factor <- 1
screen_params <- screen_control(drop_fraction = drop_fraction, keep_fraction = keep_fraction,
mtry_factor = mtry_factor)
select_params <- select_control(number_selected = 10, drop_fraction = drop_fraction,
mtry_factor = mtry_factor)
y <- as.numeric(y)
ff <- shapwff(X, y, shap_model = 0, screen_params = screen_params, select_params = select_params,
num_processors = 1, nodesize = 1)
})
detect_interaction(ff, 0.1)
plot_importance(ff)
plot_dependence(ff, features=c("V11", "V2"))
plot_potential_interactions(ff)
library(devtools)
library(roxygen2)
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
setwd("./shapff")
document()
detach("package:shapff", unload = TRUE)
remove.packages("shapff")
devtools::install_github("timothyshen213/shapff")
detect_interaction(ff, 0.1)
library(shapff)
detect_interaction(ff, 0.1)
detect_interaction(ff, 0.1, verbose=TRUE)
plot_importance(ff)
plot_dependence(ff, features=c("V11", "V2"))
plot_waterfall(ff, row_id=1)
plot_force(ff, row_id=1)
plot_potential_interactions(ff)
plot_dependence(ff, features=c("V11"))
document()
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
detach("package:shapff", unload = TRUE)
remove.packages("shapff")
devtools::install_github("timothyshen213/shapff")
library(shapff)
detect_interaction(ff, 0.1)
plot_importance(ff)
plot_dependence(ff, features=c("V11"))
plot_waterfall(ff, row_id=1)
plot_force(ff, row_id=1)
plot_potential_interactions(ff)
document()
library(devtools)
library(roxygen2)
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
setwd("./shapff")
document()
detach("package:shapff", unload = TRUE)
remove.packages("shapff")
devtools::install_github("timothyshen213/shapff")
library(shapff)
detect_interaction(ff, 0.1)
plot_importance(ff)
plot_dependence(ff, features=c("V11"))
plot_waterfall(ff, row_id=1)
plot_force(ff, row_id=1)
plot_potential_interactions(ff)
