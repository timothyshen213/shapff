n <- nrow(diabetes_X)
p <- 1000
current_p <- ncol(diabetes_X)
add_var <- p - current_p
X1 <- diabetes_X
for (i in 1:add_var) {
noise <- runif(n, min = -0.05, max = 0.05)
original_var <- sample(1:10, 1) # selects only from ten original variables
if (runif(1) < 0.33) {
new_var <- diabetes_X[[original_var]] + noise
name <- colnames(diabetes_X)[[original_var]]
} else if (runif(1) < 0.66) {
new_var <- diabetes_X[[original_var]] + 10 * noise
name <- paste0(colnames(diabetes_X)[[original_var]],"_more")
} else {
new_var <- runif(n, min = -0.05, max = 0.05)
name <- "unif"
}
X1 <- cbind(X1, new_var)
colnames(X1)[(i+64)] <- paste0("noise_",name)
}
X2 <- diabetes_X
for (i in 1:add_var) {
noise <- runif(n, min = -0.05, max = 0.05)
original_var <- sample(1:current_p, 1) # selects from all 64 variables
if (runif(1) < 0.33) {
new_var <- diabetes_X[[original_var]] + noise
name <- colnames(diabetes_X)[[original_var]]
} else if (runif(1) < 0.66) {
new_var <- diabetes_X[[original_var]] + 10 * noise
name <- paste0(colnames(diabetes_X)[[original_var]],"_more")
} else {
new_var <- runif(n, min = -0.05, max = 0.05)
name <- "unif"
}
X2 <- cbind(X2, new_var)
colnames(X2)[(i+64)] <- paste0("noise_",name)
}
name_X <- colnames(diabetes$x)
orig_X3 <- matrix(diabetes$x, nrow = 442, ncol = 10)
colnames(orig_X3) <- name_X
orig_X3 <- as.data.frame(orig_X3)
X3 <- orig_X3
for (i in 1:add_var) {
noise <- runif(n, min = -0.05, max = 0.05)
original_var <- sample(1:10, 1)
if (runif(1) < 0.33) {
new_var <- orig_X3[[original_var]] + noise
name <- colnames(orig_X3)[[original_var]]
} else if (runif(1) < 0.66) {
new_var <- orig_X3[[original_var]] + 10 * noise
name <- paste0(colnames(orig_X3)[[original_var]],"_more")
} else {
new_var <- runif(n, min = -0.05, max = 0.05)
name <- "unif"
}
X3 <- cbind(X3, new_var)
colnames(X3)[(i+10)] <- paste0("noise_",name)
}
#| code-fold: true
cor_matrix <- cor(X3)
cor_matrix <- cor_matrix^2
cor_df <- as.data.frame(as.table(cor_matrix))
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
cor_df <- cor_df[!duplicated(t(apply(cor_df, 1, sort))), ]
top_correlations <- cor_df[order(-abs(cor_df$Freq)), ][1:20, ]
top_features <- unique(c(top_correlations$Var1, top_correlations$Var2))
sub_cor_matrix <- cor_matrix[top_features, top_features]
sub_cor_df <- as.data.frame(as.table(sub_cor_matrix))
ggplot(sub_cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0.5, limit = c(0, 1),
name="Correlation") +
labs(title = "Correlation Matrix of Top 20 from X3",
x = "Features",
y = "Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(Freq, 2)), color = "black", size = 2)
#| warning: TRUE
set.seed(123)
n <- nrow(diabetes_X)
p <- 1000
current_p <- ncol(diabetes_X)
add_var <- p - current_p
X1 <- diabetes_X
for (i in 1:add_var) {
noise <- runif(n, min = -0.05, max = 0.05)
original_var <- sample(1:10, 1) # selects only from ten original variables
if (runif(1) < 0.33) {
new_var <- diabetes_X[[original_var]] + noise
name <- colnames(diabetes_X)[[original_var]]
} else if (runif(1) < 0.66) {
new_var <- diabetes_X[[original_var]] + 10 * noise
name <- paste0(colnames(diabetes_X)[[original_var]],"_more")
} else {
new_var <- runif(n, min = -0.05, max = 0.05)
name <- "unif"
}
X1 <- cbind(X1, new_var)
colnames(X1)[(i+64)] <- paste0("noise_",name)
}
X2 <- diabetes_X
for (i in 1:add_var) {
noise <- runif(n, min = -0.05, max = 0.05)
original_var <- sample(1:current_p, 1) # selects from all 64 variables
if (runif(1) < 0.33) {
new_var <- diabetes_X[[original_var]] + noise
name <- colnames(diabetes_X)[[original_var]]
} else if (runif(1) < 0.66) {
new_var <- diabetes_X[[original_var]] + 10 * noise
name <- paste0(colnames(diabetes_X)[[original_var]],"_more")
} else {
new_var <- runif(n, min = -0.05, max = 0.05)
name <- "unif"
}
X2 <- cbind(X2, new_var)
colnames(X2)[(i+64)] <- paste0("noise_",name)
}
name_X <- colnames(diabetes$x)
orig_X3 <- matrix(diabetes$x, nrow = 442, ncol = 10)
colnames(orig_X3) <- name_X
orig_X3 <- as.data.frame(orig_X3)
X3 <- orig_X3
for (i in 1:990) {
noise <- runif(n, min = -0.05, max = 0.05)
original_var <- sample(1:10, 1)
if (runif(1) < 0.33) {
new_var <- orig_X3[[original_var]] + noise
name <- colnames(orig_X3)[[original_var]]
} else if (runif(1) < 0.66) {
new_var <- orig_X3[[original_var]] + 10 * noise
name <- paste0(colnames(orig_X3)[[original_var]],"_more")
} else {
new_var <- runif(n, min = -0.05, max = 0.05)
name <- "unif"
}
X3 <- cbind(X3, new_var)
colnames(X3)[(i+10)] <- paste0("noise_",name)
}
dim(X3)
#| code-fold: true
cor_matrix <- cor(X3)
cor_matrix <- cor_matrix^2
cor_df <- as.data.frame(as.table(cor_matrix))
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
cor_df <- cor_df[!duplicated(t(apply(cor_df, 1, sort))), ]
top_correlations <- cor_df[order(-abs(cor_df$Freq)), ][1:20, ]
top_features <- unique(c(top_correlations$Var1, top_correlations$Var2))
sub_cor_matrix <- cor_matrix[top_features, top_features]
sub_cor_df <- as.data.frame(as.table(sub_cor_matrix))
ggplot(sub_cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0.5, limit = c(0, 1),
name="Correlation") +
labs(title = "Correlation Matrix of Top 20 from X3",
x = "Features",
y = "Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(Freq, 2)), color = "black", size = 2)
#| warning: false
X <- X3
gsg <- goodSamplesGenes(X, verbose = 3)
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0) {
X <- X[, gsg$goodGenes]
}
if (sum(!gsg$goodSamples) > 0) {
X <- X[gsg$goodSamples, ]
}
}
powers <- c(1:20)
sft <- pickSoftThreshold(X, powerVector = powers, verbose = 5)
par(mfrow = c(1, 2))
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n", main = "Scale Free Topology")
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = 0.9, col = "red")
plot(sft$fitIndices[, 1], sft$fitIndices[, 5],
xlab = "Soft Threshold (power)", ylab = "Mean Connectivity",
type = "n", main = "Mean Connectivity vs. Soft Threshold")
text(sft$fitIndices[, 1], sft$fitIndices[, 5],
labels = powers, cex = 0.9, col = "red")
dissTOM <- as.dist(1 - cor(X))
dendro_data <- hclust(dissTOM, method = "average")
if (!is.numeric(X)) {
X <- as.matrix(X)
X <- apply(X, 2, as.numeric)
}
power_value <- 2
dynamicMods <- blockwiseModules(X, power = power_value,
pamRespectsDendro = FALSE,
saveTOMs = TRUE, verbose = 5)
dynamicColors <- labels2colors(dynamicMods$colors)
geneTree <- dynamicMods$dendrograms[[1]]
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
module_info <- data.frame(gene = colnames(X), module = dynamicColors)
table(dynamicColors)
X <- X3
if (!is.numeric(X)) {
X <- as.matrix(X)
X <- apply(X, 2, as.numeric)
}
X <- as.data.frame(X)
#| warning: false
screen_params <- screen_control(keep_fraction = 0.25, ntree_factor = 1,
mtry_factor = 15, min_ntree = 500)
select_params <- select_control(number_selected = 5, drop_fraction = 0.1,
ntree_factor = 1, mtry_factor = 15,
min_ntree = 500)
wgcna_params <- WGCNA_control(power = 2)
y <- diabetes_Y
x3_sff <- shapwff(X, y, WGCNA_params = wgcna_params,
select_params = select_params,
screen_params = screen_params,
num_processors = 1, nodesize = 1)
datatable(x3_sff$final_SHAP)
plot_importance(x3_sff)
#| warning: false
plot_decisions(x3_sff)
plot_modules(x2_sff)
y <- diabetes_Y
x3_ff <- wff(X, y, WGCNA_params = wgcna_params,
select_params = select_params,
screen_params = screen_params,
num_processors = 1, nodesize = 1)
femData <- read.csv("LiverFemale3600.csv", stringsAsFactors = FALSE)
dim(femData)
femData <- read.csv("LiverFemale3600.csv", stringsAsFactors = FALSE)
names(femData)
datatable(names(femData))
predictors <- data.frame(predictors = names(femData))
datatable(predictors)
datExp <- as.data.frame(t(femData[, -c(1:8)]))
names(datExp) <- femData$substanceBXH
rownames(datExp) <- names(femData)[-c(1:8)]
gsg <- goodSamplesGenes(datExpr0, verbose = 3)
gsg <- goodSamplesGenes(datExp, verbose = 3)
gsg <- goodSamplesGenes(datExp, verbose = 3)
gsg$allOK
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes],
collapse = ", ")))
if (sum(!gsg$goodSamples) > 0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples],
collapse = ", ")))
datExpr <- datExpr[gsg$goodSamples, gsg$goodGenes]
}
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes],
collapse = ", ")))
if (sum(!gsg$goodSamples) > 0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples],
collapse = ", ")))
datExp <- datExp[gsg$goodSamples, gsg$goodGenes]
}
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0)
printFlush(paste("Removing genes:", paste(names(datExp)[!gsg$goodGenes],
collapse = ", ")))
if (sum(!gsg$goodSamples) > 0)
printFlush(paste("Removing samples:", paste(rownames(datExp)[!gsg$goodSamples],
collapse = ", ")))
datExp <- datExp[gsg$goodSamples, gsg$goodGenes]
}
sampleTree <- flashClust(dist(datExpr0), method = "average")
library(purrr)
library(reshape2)
library(dplyr)
library(DT)
library(flashClust)
sampleTree <- flashClust(dist(datExpr0), method = "average")
sampleTree <- flashClust(dist(datExp), method = "average")
sizeGrWindow(12, 9)
par(cex = 0.6)
par(mar = c(0, 4, 2, 0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub = "", xlab = "",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
abline(h = 15, col = "red")
clust <- cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
keepSamples <- (clust == 1)
final_datExp <- datExp[keepSamples, ]
nGenes <- ncol(datExp)
nSamples <- nrow(datExp)
keepSamples <- (clust == 1)
datExp <- datExp0[keepSamples, ]
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
keepSamples <- (clust == 1)
datExp <- datExp0[keepSamples, ]
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
library(WGCNA)
library(shapff)
library(fuzzyforest) # remove later
library(randomForest) # remove later
library(fastshap) # remove later
library(purrr)
library(reshape2)
library(dplyr)
library(DT)
library(flashClust)
femData <- read.csv("LiverFemale3600.csv", stringsAsFactors = FALSE)
predictors <- data.frame(predictors = names(femData))
datatable(predictors)
datExp0 <- as.data.frame(t(femData[, -c(1:8)]))
names(datExp0) <- femData$substanceBXH
rownames(datExp0) <- names(femData)[-c(1:8)]
gsg <- goodSamplesGenes(datExp0, verbose = 3)
gsg$allOK
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0)
printFlush(paste("Removing genes:", paste(names(datExp0)[!gsg$goodGenes],
collapse = ", ")))
if (sum(!gsg$goodSamples) > 0)
printFlush(paste("Removing samples:", paste(rownames(datExp0)[!gsg$goodSamples],
collapse = ", ")))
datExp0 <- datExp0[gsg$goodSamples, gsg$goodGenes]
}
sampleTree <- flashClust(dist(datExp0), method = "average")
sizeGrWindow(12, 9)
par(cex = 0.6)
par(mar = c(0, 4, 2, 0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub = "", xlab = "",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
abline(h = 15, col = "red")
clust <- cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
keepSamples <- (clust == 1)
datExp <- datExp0[keepSamples, ]
nGenes <- ncol(datExp)
nSamples <- nrow(datExp)
traitData <- read.csv("ClinicalTraits.csv")
predictors <- data.frame(predictors = names(traitData))
datatable(predictors)
allTraits <- traitData[, -c(31, 16)]
allTraits <- allTraits[, c(2, 11:36)]
predictors <- data.frame(predictors = names(allTraits))
datatable(predictors)
femaleSamples <- rownames(datExp)
traitRows <- match(femaleSamples, allTraits$Mice)
datTraits <- allTraits[traitRows, -1]
rownames(datTraits) <- allTraits[traitRows, 1]
powers <- c(c(1:10), seq(from = 12, to = 20, by = 2))
sft <- pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
powers <- c(c(1:10), seq(from = 12, to = 20, by = 2))
sft <- pickSoftThreshold(datExp, powerVector = powers, verbose = 5)
#| warning: false
powers <- c(c(1:10), seq(from = 12, to = 20, by = 2))
sft <- pickSoftThreshold(datExp, powerVector = powers, verbose = 5)
sizeGrWindow(9, 5)
par(mfrow = c(1, 2))
cex1 <- 0.9
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2], xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit,signed R^2", type = "n", main = paste("Scale independence"))
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2], labels = powers,
cex = cex1, col = "red")
sizeGrWindow(9, 5)
par(mfrow = c(1, 2))
cex1 <- 0.9
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2], xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit,signed R^2", type = "n", main = paste("Scale independence"))
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2], labels = powers,
cex = cex1, col = "red")
# this line corresponds to using an R^2 cut-off of h
abline(h = 0.9, col = "red")
plot(sft$fitIndices[, 1], sft$fitIndices[, 5], xlab = "Soft Threshold (power)", ylab = "Mean Connectivity",
type = "n", main = paste("Mean connectivity"))
text(sft$fitIndices[, 1], sft$fitIndices[, 5], labels = powers, cex = cex1, col = "red")
net <- blockwiseModules(datExpr, power = 6, TOMType = "unsigned",
minModuleSize = 30)
net <- blockwiseModules(datExp, power = 6, TOMType = "unsigned",
minModuleSize = 30)
net <- labels2colors(net$colors)
geneTree <- net$dendrograms[[1]]
# Optional parameters: reassignThreshold = 0, mergeCutHeight = 0.25,
# numericLabels = FALSE, pamRespectsDendro = FALSE,
# saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM", verbose = 3
net <- blockwiseModules(datExp, power = 6, TOMType = "unsigned",
minModuleSize = 30, pamRespectsDendro = FALSE,
saveTOMs = TRUE)
net <- labels2colors(net$colors)
geneTree <- net$dendrograms[[1]]
# Optional parameters: reassignThreshold = 0, mergeCutHeight = 0.25,
# numericLabels = FALSE, saveTOMFileBase = "femaleMouseTOM", verbose = 3
net <- blockwiseModules(datExp, power = 6, TOMType = "unsigned",
minModuleSize = 30, pamRespectsDendro = FALSE,
saveTOMs = TRUE)
netColors <- labels2colors(net$colors)
geneTree <- net$dendrograms[[1]]
plotDendroAndColors(geneTree, netColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
module_info <- data.frame(gene = colnames(X), module = netColors)
netColors <- labels2colors(net$colors)
geneTree <- net$dendrograms[[1]]
plotDendroAndColors(geneTree, netColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
module_info <- data.frame(gene = colnames(X), module = net)
netColors <- labels2colors(net$colors)
geneTree <- net$dendrograms[[1]]
plotDendroAndColors(geneTree, netColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
module_info <- data.frame(gene = colnames(datExp), module = net)
netColors <- labels2colors(net$colors)
geneTree <- net$dendrograms[[1]]
plotDendroAndColors(geneTree, netColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
module_info <- data.frame(gene = colnames(datExp), module = netColors)
datatable(netColors)
datatable(as.dataframe(netColors))
netColors
colors <- data.frame(table(netColors))
datatable(colors)
Liver_Expr <- final_Liver_Expr
Liver_Exp <- final_Liver_Exp
y <- datTraits$weight_g
X <- datExp
missing_y <- which(is.na(y))
X <- X[-missing_y, ]
y <- y[-missing_y]
X_impute <- rfImpute(X, y, iter = 5, ntree = 5000)
final_Liver_Exp <- X_impute
# Optionally, save the data
# save(final_Liver_Exp, file = "final_Liver_Expr.RData")
Liver_Exp <- final_Liver_Exp
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
module_membership <- net$colors
mtry_factor <- 1
drop_fraction <- 0.25
number_selected <- 10
keep_fraction <- 0.05
min_ntree <- 5000
ntree_factor <- 5
final_ntree <- 5000
screen_params <- screen_control(drop_fraction = drop_fraction,
keep_fraction = keep_fraction,
min_ntree = min_ntree, mtry_factor = mtry_factor,
ntree_factor = ntree_factor)
select_params <- select_control(drop_fraction = drop_fraction,
number_selected = number_selected,
min_ntree = min_ntree, mtry_factor = mtry_factor,
ntree_factor = ntree_factor)
WGCNA_params <- WGCNA_control(power = 6, minModuleSize = 30, TOMType = "unsigned",
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE)
ffs_fit <- shapwff(expression_levels, weight, shap_model = 1,
shap_type = "shapley", WGCNA_params = WGCNA_params,
select_params = select_params,
screen_params = screen_params,
final_ntree = final_ntree, num_processors=1)
ffs_fit <- shapwff(expression_levels, weight, shap_model = 1,
shap_type = "shapley", WGCNA_params = WGCNA_params,
select_params = select_params,
screen_params = screen_params,
final_ntree = final_ntree, num_processors=1)
ffs_fit <- wff(expression_levels, weight, WGCNA_params = WGCNA_params,
select_params = select_params,
screen_params = screen_params,
final_ntree = final_ntree, num_processors=1)
ffs_fit$feature_list
modplot(ffs_fit)
rf_model <- randomForest(y=weight, x= expression_levels, importance = TRUE)
library(DT)
library(reshape2)
library(ggplot2)
library(flashClust) # needed for WGCNA preprocessing
install.packages(quarto)
install.packages("quarto")
library(quarto)
getwd
getwd()
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/fuzzyforest/moresim")
quarto_render("boston_vignette.qmd", output_format = "html")
quarto_render("boston_vignette.qmd", output_format = "html")
quarto_render("boston_vignette.qmd", output_format = "html")
quarto_render("boston_vignette.qmd", output_format = "html")
quarto_render("boston_vignette.qmd", output_format = "html")
quarto_render("madelon_vignette.qmd", output_format = "html")
cd
getwd
getwd()
setwd(C:\Users\timot\OneDrive\Documents\1 - UCLA\Research\shapff)
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
setwd("./shapff")
library(roxygen2)
library(devtools)
usethis::use_data("Liver_Exp")
View(Liver_Exp)
usethis::use_data(Liver_Exp)
usethis::use_data(femData)
usethis::use_data(traitData)
usethis::use_vignette("test")
usethis::use_build_ignore("vignettes/Female Mice Liver Expression.qmd")
usethis::use_git_ignore("vignettes/Female Mice Liver Expression.qmd")
