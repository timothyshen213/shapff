select_params <- select_control(number_selected = 10, drop_fraction = 0.1, ntree_factor = 2, min_ntree = 500)
wgcna_params <- WGCNA_control(power = 5)
sff <- shapwff(X, y, WGCNA_params = wgcna_params, select_params = select_params,
shap_model= "full", screen_params = screen_params, auto_initial = 2,
num_processors = 1, nodesize = 1, debug = 1, verbose = 0,
initial = TRUE, min_features = 10)
initial_aar <- initial_screen
datatable(initial_aar, options = list(pageLength = 5, searchHighlight = TRUE))
initial_aar <- initial_screen
datatable(initial_aar, options = list(pageLength = 10, searchHighlight = TRUE))
plot_modules(sff)
install.packages("patchwork")
library(patchwork)
p1 <- plot_feature_importance(sff)
p1 <- plot_importance(sff)
p2 <- plot_modules(sff)
p3 <- plot_decision(sff)
p1 <- plot_importance(sff)
p2 <- plot_modules(sff)
p3 <- plot_decisions(sff)
#' @describeIn plot_decisions
#'   TO DO.
#' @export
plot_decisions.shap_fuzzy_forest <- function(object, highlight = NULL, plot_title = "Decision Plot",
geom_point = FALSE,
gradient = c("blue", "red"), ...){
shap_values <- object$shap_obj$shapley_values
#if (object$shap_type == "tree"){
#  shap_values <- object$shap_obj$shaps
#}
feature_names <- colnames(shap_values)
if (!is.null(highlight)){
if (is.numeric(highlight)){
if (all(highlight <= 1 & highlight >= nrow(shap_values))){
stop("highlighted instance id(s) not within range")
}
}
if (is.character(highlight)){
if (!all(highlight %in% feature_name)){
stop("highlighted instance(s) not valid variable name")
}
}
if (!is.character(highlight) && !is.numeric(highlight)){
stop("highlight must be a character or numeric vector")
}
}
if (!is.character(plot_title)){
stop("plot_title must be character string. see ggplot2")
}
if (!is.logical(geom_point)){
stop("geom_point must be boolean. help(plot_decisions)")
}
base_value <- mean(predict(object$final_rf, object$final_X))
prediction_out <- predict(object$final_rf, object$final_X)
feature_values <- object$final_X
shap_df <- as.data.frame(shap_values)
colnames(shap_df) <- feature_names
shap_df$Observation <- 1:nrow(shap_df)
shap_long <- melt(shap_df, id.vars = "Observation", variable.name = "Feature", value.name = "SHAP")
feature_importance <- colMeans(abs(shap_values))
feature_names <- names(sort(feature_importance, decreasing = FALSE))
shap_long$Feature <- factor(shap_long$Feature, levels = feature_names)
shap_long <- shap_long %>%
group_by(Observation) %>%
arrange(Feature) %>%
mutate(Cumulative_SHAP = cumsum(SHAP))
start <- data.frame(
Observation = 1:nrow(shap_df),
Feature = "",
SHAP = 0,
Cumulative_SHAP = 0
)
shap_long <- bind_rows(start, shap_long)
shap_long$Feature <- factor(shap_long$Feature, levels = c("", feature_names))
last_shap_values <- shap_long %>%
group_by(Observation) %>%
summarize(Last_Cumulative_SHAP = last(Cumulative_SHAP))
shap_long <- shap_long %>%
left_join(last_shap_values, by = "Observation")
if (!is.null(highlight)){
shap_long <- shap_long %>% filter(Observation %in% highlight)
}
if (geom_point == FALSE){
decision_plot <- ggplot(shap_long, aes(x = Cumulative_SHAP, y = Feature, group = Observation)) +
geom_path(aes(color = Last_Cumulative_SHAP), size = 1) +
geom_vline(xintercept = base_value, color = "#999999", linetype = "dashed") +
scale_color_gradient(low = gradient[1], high = gradient[2]) +
theme_minimal() +
labs(title = "Decision Plot",
x = "Cumulative SHAP Value",
y = "Feature",
color = "Predicted Output") +
theme(axis.text.y = element_text(size = 12), axis.text.x = element_text(size = 10))
}
if (geom_point == TRUE){
decision_plot <- ggplot(shap_long, aes(x = Cumulative_SHAP, y = Feature, group = Observation)) +
geom_path(aes(color = Last_Cumulative_SHAP), size = 1) +
geom_point(size = 2) +
geom_vline(xintercept = base_value, color = "#999999", linetype = "dashed") +
scale_color_gradient(low = gradient[1], high = gradient[2]) +
theme_minimal() +
labs(title = "Decision Plot",
x = "Cumulative SHAP Value",
y = "Feature",
color = "Predicted Output") +
theme(axis.text.y = element_text(size = 12), axis.text.x = element_text(size = 10))
}
print(decision_plot)
}
p1 <- plot_importance(sff)
p2 <- plot_modules(sff)
p3 <- plot_decisions(sff)
combined_plot <- (p1 | p2) / p3
print(combined_plot)
install.packages("plotly")
combined_plot <- (p1 | p2) / p3 +
plot_layout(heights = c(2, 1))
p1 <- plot_importance(sff)
#| label: load-packages
#| warning: false
library(dplyr)
library(readxl)
library(DT)
library(patchwork)
library(WGCNA)
library(Rfast)
library(ggplot2)
library(reshape2)
library(shapff)
library(fuzzyforest)
library(randomForest)
library(fastshap) # remove later
options(stringsAsFactors = FALSE)
#| warning: false
#setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/Visit A-G")
data <- read_excel("Vis_A_G_Lockdown_102624.xlsx")
info <- data %>%
mutate(
casecontrol = ifelse(casecontrol == "case", 1, 0),
# Replace NAs with 0 in columns containing "cvl" or "vload2" in their names
across(matches("cvl|vload2"), ~ ifelse(is.na(.), 0, .)),
visitdate = as.numeric(visitdate),
esthivdate = as.numeric(esthivdate),
lastnopdate_one = as.numeric(lastnopdate_one),
esthaartinit = as.numeric(esthaartinit),
frstpardate_one = as.numeric(frstpardate_one)
)
#| warning: TRUE
data_long <- info %>%
select(macsidnumber, age, visit, RawAA, RawEEA, RawPEA, RawGEA, RawTL, casecontrol) %>%
mutate(batch = ifelse(visit %in% c("1", "2", "3", "4"), "Batch 1", "Batch 2")) %>%
arrange(macsidnumber, age)
# Model for RawAA
modelb2_AA <- lm(RawAA ~ age + batch , data = data_long)
info$aar <- residuals(modelb2_AA)
# Model for RawEEA
modelb2_EEA <- lm(RawEEA ~ age + batch , data = data_long)
info$eeaa <- residuals(modelb2_EEA)
# Model for RawPEA
modelb2_PEA <- lm(RawPEA ~ age + batch , data = data_long)
info$peaa <- residuals(modelb2_PEA)
# Model for RawGEA
modelb2_GEA <- lm(RawGEA ~ age + batch , data = data_long)
info$geaa <- residuals(modelb2_GEA)
# Model for RawTL
modelb2_TL <- lm(RawTL ~ age + batch , data = data_long)
info$dnamtladjage <- residuals(modelb2_TL)
info_x <- info %>% select(-RawAA, -RawEEA, -RawPEA, -RawGEA, -RawTL, -aar, -eeaa, -peaa,
-geaa, -dnamtladjage)
info_xA <- info_x %>% filter(visit == 1)
y <- info %>% filter(visit == 1) %>% select(aar, eeaa, peaa, geaa, dnamtladjage)
gsg <- goodSamplesGenes(info_xA, verbose = 3)
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0) {
info_xA <- info_xA[, gsg$goodGenes]
}
if (sum(!gsg$goodSamples) > 0) {
info_xA <- info_xA[gsg$goodSamples, ]
y <- y[gsg$goodSamples,] # Remove corresponding indices in y
}
}
powers <- c(1:20)
sft <- pickSoftThreshold(info_xA, powerVector = powers, verbose = 5)
par(mfrow = c(1, 2))
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n", main = "Scale Free Topology")
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = 0.9, col = "red")
plot(sft$fitIndices[, 1], sft$fitIndices[, 5],
xlab = "Soft Threshold (power)", ylab = "Mean Connectivity",
type = "n", main = "Mean Connectivity vs. Soft Threshold")
text(sft$fitIndices[, 1], sft$fitIndices[, 5],
labels = powers, cex = 0.9, col = "red")
# Identify complete cases in info_xA
complete_rows <- complete.cases(info_xA)
info_xA_clean <- info_xA[complete_rows, ]
y_clean <- y[complete_rows, ]
# Compute the dissimilarity matrix
dissTOM <- as.dist(1 - cor(info_xA_clean, use = "pairwise.complete.obs"))
#dissTOM <- as.dist(1 - cor(info_xA))
dendro_data <- hclust(dissTOM, method = "average")
plot(dendro_data, main = "Dendrogram with Raw Distances", xlab = "Genes", ylab = "Height")
total_NA <- sort(colSums(is.na(info)), decreasing = TRUE)
head(total_NA, 10)
#X <- as.data.frame(info_xA)
y <- as.vector(y_clean$aar)
X <- as.data.frame(info_xA_clean)
screen_params <- screen_control(min_ntree = 500, keep_fraction = 0.1)
select_params <- select_control(number_selected = 10, drop_fraction = 0.1, ntree_factor = 2, min_ntree = 500)
wgcna_params <- WGCNA_control(power = 5)
sff <- shapwff(X, y, WGCNA_params = wgcna_params, select_params = select_params,
shap_model= "full", screen_params = screen_params, auto_initial = 2,
num_processors = 1, nodesize = 1, debug = 1, verbose = 0,
initial = TRUE, min_features = 10)
initial_aar <- initial_screen
datatable(initial_aar, options = list(pageLength = 10, searchHighlight = TRUE))
p1 <- plot_importance(sff)
p2 <- plot_modules(sff)
p3 <- plot_decisions(sff)
combined_plot <- (p1 | p2) / p3 +
plot_layout(heights = c(2, 1))
print(combined_plot)
p1 <- plot_importance(sff)
p2 <- plot_modules(sff)
p3 <- plot_decisions(sff)
combined_plot <- (p1 | p2) / p3 +
plot_layout(heights = c(2, 2))
print(combined_plot)
p1 <- plot_importance(sff)
p2 <- plot_modules(sff)
p3 <- plot_decisions(sff)
combined_plot <- (p1 | p2) / p3 +
plot_layout(heights = c(2, 4))
print(combined_plot)
p1 <- plot_importance(sff)
p2 <- plot_modules(sff)
p3 <- plot_decisions(sff)
combined_plot <- (p1 | p2) / p3 +
plot_layout(heights = c(4, 4))
print(combined_plot)
p1 <- plot_importance(sff)
p2 <- plot_importance(sff, kind = "bar")
p3 <- plot_modules(sff)
p4 <- plot_decisions(sff)
combined_plot <- (p1 | p2) / (p3 | p4) +
plot_layout(heights = c(4, 4))
print(combined_plot)
p1 <- plot_importance(sff)
p2 <- plot_importance(sff, kind = "bar")
p3 <- plot_modules(sff)
p4 <- plot_decisions(sff)
combined_plot <- (p1 | p2) / (p3 | p4)
print(combined_plot)
p1 <- plot_importance(sff)
p2 <- plot_importance(sff, kind = "bar")
p3 <- plot_modules(sff)
p4 <- plot_decisions(sff)
combined_plot <- (p1 | p2)
print(combined_plot)
p1 <- plot_importance(sff)
p2 <- plot_importance(sff, kind = "bar")
p3 <- plot_modules(sff)
p4 <- plot_decisions(sff)
combined_plot <- (p1 / p2)
print(combined_plot)
p3
p4
sff$final_SHAP
sff$final_X
sff$selection_list
ncol(info_xA_clean)
ncol(info_xA_clean)*0.1
ncol(info_xA_clean)*0.2
#X <- as.data.frame(info_xA)
y <- as.vector(y_clean$aar)
X <- as.data.frame(info_xA_clean)
screen_params <- screen_control(min_ntree = 500, keep_fraction = 0.2)
select_params <- select_control(number_selected = 5, drop_fraction = 0.1,
ntree_factor = 2, min_ntree = 500)
wgcna_params <- WGCNA_control(power = 5)
sff <- shapwff(X, y, WGCNA_params = wgcna_params, select_params = select_params,
shap_model= "full", screen_params = screen_params, auto_initial = 2,
num_processors = 1, nodesize = 1, debug = 1, verbose = 0,
initial = TRUE, min_features = 10)
sff$final_SHAP
#X <- as.data.frame(info_xA)
y <- as.vector(y_clean$aar)
X <- as.data.frame(info_xA_clean)
screen_params <- screen_control(min_ntree = 500, keep_fraction = 0.2)
select_params <- select_control(number_selected = 5, drop_fraction = 0.1,
ntree_factor = 2, min_ntree = 500)
wgcna_params <- WGCNA_control(power = 5)
sff <- shapwff(X, y, WGCNA_params = wgcna_params, select_params = select_params,
shap_model= "full", screen_params = screen_params, auto_initial = 2,
num_processors = 1, nodesize = 1, debug = 1, verbose = 0,
initial = TRUE, min_features = 10)
sff$final_SHAP
for (i in 1:3) {
sff <- shapwff(X, y, WGCNA_params = wgcna_params, select_params = select_params,
shap_model= "full", screen_params = screen_params, auto_initial = 2,
num_processors = 1, nodesize = 1, debug = 1, verbose = 0,
initial = TRUE, min_features = 10)
# Extract the final SHAP rankings (2nd column contains the feature rankings)
rankings <- sff$final_SHAP[, 2]
# Store the rankings for this run
final_rankings[[i]] <- rankings
}
final_rankings <- list()
for (i in 1:3) {
sff <- shapwff(X, y, WGCNA_params = wgcna_params, select_params = select_params,
shap_model= "full", screen_params = screen_params, auto_initial = 2,
num_processors = 1, nodesize = 1, debug = 1, verbose = 0,
initial = TRUE, min_features = 10)
# Extract the final SHAP rankings (2nd column contains the feature rankings)
rankings <- sff$final_SHAP[, 2]
# Store the rankings for this run
final_rankings[[i]] <- rankings
}
# Convert the list of rankings into a matrix for easier calculation of averages
rank_matrix <- do.call(cbind, final_rankings)
# Calculate the average rank for each feature (column means)
average_ranks <- apply(rank_matrix, 1, mean)
# Order the features by average rank (lowest rank is the best)
ordered_features <- order(average_ranks)
# Show the features ordered by average rank
ordered_features
rankings
variable_ranks <- list()
variable_counts <- list()
for (i in 1:3) {
# Run shapwff for the current iteration
sff <- shapwff(X, y, WGCNA_params = wgcna_params, select_params = select_params,
shap_model= "full", screen_params = screen_params, auto_initial = 2,
num_processors = 1, nodesize = 1, debug = 1, verbose = 0,
initial = TRUE, min_features = 10)
# Extract the final SHAP ranking (final SHAP results are in the second column)
final_shap <- sff$final_SHAP
# If final_SHAP has any variables (can be different every time), we proceed
if (nrow(final_shap) > 0) {
for (j in 1:nrow(final_shap)) {
variable <- final_shap[j, 1]  # Variable name (1st column)
vim <- final_shap[j, 2]      # Variable importance measure (VIM) (2nd column)
# Update the frequency count and VIM accumulation for each variable
if (!(variable %in% names(variable_ranks))) {
variable_ranks[[variable]] <- vim
variable_counts[[variable]] <- 1
} else {
# Accumulate VIM values for averaging
variable_ranks[[variable]] <- variable_ranks[[variable]] + vim
variable_counts[[variable]] <- variable_counts[[variable]] + 1
}
}
}
}
# Calculate the average VIM for each variable
average_vims <- sapply(names(variable_ranks), function(variable) {
variable_ranks[[variable]] / variable_counts[[variable]]
})
# Sort variables by their average VIM in descending order (highest importance first)
sorted_variables <- sort(average_vims, decreasing = TRUE)
# Frequency of each variable (how many times it appeared in the top ranking)
variable_frequencies <- sapply(names(variable_counts), function(variable) {
variable_counts[[variable]]
})
# Results
sorted_variables  # Average VIM of each variable, sorted from highest to lowest
variable_frequencies  # Frequency count of each variable across all runs
variable_ranks <- list()
variable_counts <- list()
for (i in 1:3) {
# Run shapwff for the current iteration
sff <- shapwff(X, y, WGCNA_params = wgcna_params, select_params = select_params,
shap_model= "full", screen_params = screen_params, auto_initial = 2,
num_processors = 1, nodesize = 1, debug = 1, verbose = 0,
initial = TRUE, min_features = 10)
# Extract the final SHAP ranking (final SHAP results are in the second column)
final_shap <- sff$final_SHAP
# If final_SHAP has any variables (can be different every time), we proceed
if (nrow(final_shap) > 0) {
for (j in 1:nrow(final_shap)) {
variable <- final_shap[j, 1]  # Variable name (1st column)
vim <- final_shap[j, 2]      # Variable importance measure (VIM) (2nd column)
# Update the frequency count and VIM accumulation for each variable
if (!(variable %in% names(variable_ranks))) {
variable_ranks[[variable]] <- vim
variable_counts[[variable]] <- 1
} else {
# Accumulate VIM values for averaging
variable_ranks[[variable]] <- variable_ranks[[variable]] + vim
variable_counts[[variable]] <- variable_counts[[variable]] + 1
}
}
}
}
# Calculate the average VIM for each variable
average_vims <- sapply(names(variable_ranks), function(variable) {
variable_ranks[[variable]] / variable_counts[[variable]]
})
# Sort variables by their average VIM in descending order (highest importance first)
sorted_variables <- sort(average_vims, decreasing = TRUE)
# Frequency of each variable (how many times it appeared in the top ranking)
variable_frequencies <- sapply(names(variable_counts), function(variable) {
variable_counts[[variable]]
})
# Create a dataframe combining both average VIMs and frequency counts
variable_summary <- data.frame(
Variable = names(variable_counts),
Average_VIM = average_vims,
Frequency = variable_frequencies
)
variable_summary
variable_frequencies
average_cims
average_vims
average_vims <- sapply(names(variable_ranks), function(variable) {
variable_ranks[[variable]] / variable_counts[[variable]]
})
sorted_variables <- sort(average_vims, decreasing = TRUE)
variable_frequencies <- sapply(names(variable_counts), function(variable) {
variable_counts[[variable]]
})
variable_summary <- data.frame(
Variable = names(variable_counts),
Average_VIM = average_vims,
Frequency = variable_frequencies
)
variable_summary <- variable_summary[, -1]
average_vims <- sapply(names(variable_ranks), function(variable) {
variable_ranks[[variable]] / variable_counts[[variable]]
})
sorted_variables <- sort(average_vims, decreasing = TRUE)
variable_frequencies <- sapply(names(variable_counts), function(variable) {
variable_counts[[variable]]
})
variable_summary <- data.frame(
Variable = names(variable_counts),
Average_VIM = average_vims,
Frequency = variable_frequencies
)
variable_summary <- variable_summary[, -1]
variable_summary <- variable_summary[order(-variable_summary$Average_VIM), ]
variable_summary <- as.data.table(variable_summary)
average_vims <- sapply(names(variable_ranks), function(variable) {
variable_ranks[[variable]] / variable_counts[[variable]]
})
sorted_variables <- sort(average_vims, decreasing = TRUE)
variable_frequencies <- sapply(names(variable_counts), function(variable) {
variable_counts[[variable]]
})
variable_summary <- data.frame(
Variable = names(variable_counts),
Average_VIM = average_vims,
Frequency = variable_frequencies
)
variable_summary <- variable_summary[, -1]
variable_summary <- variable_summary[order(-variable_summary$Average_VIM), ]
print(variable_summary)
datatable(variable_summary)
average_vims <- sapply(names(variable_ranks), function(variable) {
variable_ranks[[variable]] / variable_counts[[variable]]
})
sorted_variables <- sort(average_vims, decreasing = TRUE)
variable_frequencies <- sapply(names(variable_counts), function(variable) {
variable_counts[[variable]]
})
variable_summary <- data.frame(
Variable = names(variable_counts),
Average_VIM = average_vims,
Frequency = variable_frequencies
)
variable_summary <- variable_summary[, -1]
variable_summary <- variable_summary[order(-variable_summary$Average_VIM), ]
datatable(variable_summary)
set.seed(1234)
variable_ranks <- list()
variable_counts <- list()
for (i in 1:100) {
sff <- shapwff(X, y, WGCNA_params = wgcna_params, select_params = select_params,
shap_model= "full", screen_params = screen_params, auto_initial = 2,
num_processors = 1, nodesize = 1, debug = 1, verbose = 0,
initial = TRUE, min_features = 10)
final_shap <- sff$final_SHAP
if (nrow(final_shap) > 0) {
for (j in 1:nrow(final_shap)) {
variable <- final_shap[j, 1]
vim <- final_shap[j, 2]
if (!(variable %in% names(variable_ranks))) {
variable_ranks[[variable]] <- vim
variable_counts[[variable]] <- 1
} else {
variable_ranks[[variable]] <- variable_ranks[[variable]] + vim
variable_counts[[variable]] <- variable_counts[[variable]] + 1
}
}
}
}
average_vims <- sapply(names(variable_ranks), function(variable) {
variable_ranks[[variable]] / variable_counts[[variable]]
})
sorted_variables <- sort(average_vims, decreasing = TRUE)
variable_frequencies <- sapply(names(variable_counts), function(variable) {
variable_counts[[variable]]
})
variable_summary <- data.frame(
Variable = names(variable_counts),
Average_VIM = average_vims,
Frequency = variable_frequencies
)
variable_summary <- variable_summary[, -1]
variable_summary <- variable_summary[order(-variable_summary$Average_VIM), ]
datatable(variable_summary)
