runtime_temp[[current_model]] <- out$runtime[3] + runtime_temp[[current_model]]
print(i)
}
out
class(out[[5]])
shap_obj <- out[[5]]
shap_obj$final_X
final_pred <- rowSums(shap_obj$final_X)
final_pred
shap_obj$selection_list
shap_obj$shap_obj
shap_obj$shap_obj
shap_obj <- out[[5]]$shap_obj
View(shap_object)
shap_obj$shaps
final_pred <- rowSums(shap_obj$shaps)
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps)
final_pred
out[[5]]$final_rf
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
predicted_y
error <- (shap_obj - predicted_y)^2
error <- (final_pred - predicted_y)^2
error
final_pred
predicted_y
final_pred
final_pred[1]
predicted_y[1]
predicted_y[1]-final_pred[1]
(predicted_y[1]-final_pred[1])^2
(predicted_y[6]-final_pred[6])^2
shap_obj$interactions
shap_obj
View(shap_obj)
View(shap_obj)
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps) + shap_obj$baseline
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps) + shap_obj$baseline
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- (mean(error))/100
eff_error <- error + eff_error
eff_error <- matrix(nrow=1,ncol=1)
eff_error <- error + eff_error
for (i in 1:length(files)) {
load(files[i])
id <- indices[i]
current_model <- find_model_index(id)
if (find_model_index(id) > 60){
print(i)
next
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps) + shap_obj$baseline
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- (mean(error))/100
eff_error <- error + eff_error
print(i)
}
eff_error <- matrix(nrow=1,ncol=1)
q <- 0
for (i in 1:length(files)) {
load(files[i])
id <- indices[i]
current_model <- find_model_index(id)
if (find_model_index(id) > 60){
print(i)
next
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps) + shap_obj$baseline
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- (mean(error))/100
eff_error <- error + eff_error
q <- q + 1
print(i)
}
eff_error/q
eff_error
eff_error <- matrix(nrow=1,ncol=1)
q <- 0
for (i in 1:length(files)) {
load(files[i])
id <- indices[i]
current_model <- find_model_index(id)
if (find_model_index(id) > 60){
print(i)
next
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps) + shap_obj$baseline
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- (mean(error))/100
eff_error <- eff_error + final_error
print(eff_error)
q <- q + 1
print(i)
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps) + shap_obj$baseline
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- (mean(error))/100
final_error
error
predicted_y
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps) + shap_obj$baseline
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
final_pred
final_pred <- rowSums(shap_obj$shaps)
final_pred
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- (mean(error))/100
eff_error <- eff_error + final_error
print(eff_error)
error
final_error
eff_error <- matrix(nrow=1,ncol=1)
q <- 0
for (i in 1:length(files)) {
load(files[i])
id <- indices[i]
current_model <- find_model_index(id)
if (find_model_index(id) > 60){
print(i)
next
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps)
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- mean(error)
eff_error <- eff_error + final_error
print(eff_error)
q <- q + 1
print(i)
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps)
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- mean(error)
eff_error <- eff_error + final_error
print(eff_error)
final_error
eff_error <- 0
final_error <- mean(error)
eff_error <- eff_error + final_error
print(eff_error)
eff_error <- 0
q <- 0
for (i in 1:length(files)) {
load(files[i])
id <- indices[i]
current_model <- find_model_index(id)
if (find_model_index(id) > 60){
print(i)
next
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps)
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- mean(error)
eff_error <- eff_error + final_error
print(eff_error)
q <- q + 1
print(i)
}
eff_error/q
files <- list.files("eff_ffs", full.names = TRUE)
get_indices <- function(files) {
split <- strsplit(files, "eff_ffs/out")
indices <- unlist(lapply(split, function(x) {
x[2]
}))
indices <- as.numeric(indices)
indices <- indices[is.na(indices) == FALSE]
indices <- sort(indices)
}
# Function to reorder and rename files sequentially
reorder_files <- function(files) {
indices <- get_indices(files)
# Generate new file names sequentially from 1 up to the number of files
new_files <- paste0(dirname(files[1]), "/out", seq_along(indices))
# Rename the files on the disk
for (i in seq_along(files)) {
file.rename(files[i], new_files[i])
}
return(new_files)
}
reorder_files2 <- function(files, n){
bad_ordering <- sort(as.character(1:n))
files <- files[order(as.numeric(bad_ordering))]
files
}
reorder_files3 <- function(string_list) {
library(gtools)
sorted_list <- mixedsort(string_list)
return(sorted_list)
}
#files <- reorder_files(files)
files <- reorder_files3(files)
files
rep_num <- 100
keep_frac <- c(0.01, 0.05, 0.1, 0.15, 0.25)
drop_frac <- c(0.05, 0.1, 0.25, 0.5)
mtry_factor <- c(0.5, 1, 2)
p <- c(100, 1000)
n <- c(100)
param_list <- list(keep_frac, drop_frac, mtry_factor, p, n)
param_settings <- expand.grid(param_list)
param_settings <- param_settings[, 5:1]
names(param_settings) <- c("n", "p", "mtry_factor", "drop_fraction", "keep_fraction")
total_sim_settings <- dim(param_settings)[1]
total_sims <- rep_num * total_sim_settings
indices <- get_indices(files)
model_index <- cbind(seq(1, total_sims, by = rep_num), seq(rep_num, total_sims, by = rep_num))
find_model_index <- function(id) {
which(apply(model_index, 1, function(x) {
(id >= x[1]) && (id <= x[2])
} == TRUE))
}
ff_results <- vector("list", total_sim_settings)
runtime_temp <- vector("list", total_sim_settings)
runtime_user <- matrix(nrow = 1, ncol = 1)
runtime_system <- matrix(nrow = 1, ncol = 1)
runtime_total <- matrix(nrow = 1, ncol = 1)
for (i in 1:60) {
if (i <= 60){
ff_results[[i]] <- matrix(0, 100, 2)
}
if (i > 60){
ff_results[[i]] <- matrix(0, 1000, 2)
}
runtime_temp[[i]] <- matrix(0,1,1)
}
eff_error <- 0
q <- 0
for (i in 1:length(files)) {
load(files[i])
id <- indices[i]
current_model <- find_model_index(id)
if (find_model_index(id) > 60){
print(i)
next
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps)
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- mean(error)
eff_error <- eff_error + final_error
print(eff_error)
q <- q + 1
print(i)
}
out[[5]]
out[[5]]$shap_obj
shap_obj$baseline
load(files[i])
id <- indices[i]
current_model <- find_model_index(id)
if (find_model_index(id) > 60){
print(i)
next
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shapley_values) + shap_obj$baseline
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- mean(error)
eff_error <- eff_error + final_error
print(eff_error)
eff_error <- 0
q <- 0
for (i in 1:length(files)) {
load(files[i])
id <- indices[i]
current_model <- find_model_index(id)
if (find_model_index(id) > 60){
print(i)
next
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shapley_values) + shap_obj$baseline
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- mean(error)
eff_error <- eff_error + final_error
print(eff_error)
q <- q + 1
print(i)
}
eff_error/q
eff_error
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/fuzzyforest/SimulationStudy")
files <- list.files("tree_ffs", full.names = TRUE)
get_indices <- function(files) {
split <- strsplit(files, "tree_ffs/out")
indices <- unlist(lapply(split, function(x) {
x[2]
}))
indices <- as.numeric(indices)
indices <- indices[is.na(indices) == FALSE]
indices <- sort(indices)
}
# Function to reorder and rename files sequentially
reorder_files <- function(files) {
indices <- get_indices(files)
# Generate new file names sequentially from 1 up to the number of files
new_files <- paste0(dirname(files[1]), "/out", seq_along(indices))
# Rename the files on the disk
for (i in seq_along(files)) {
file.rename(files[i], new_files[i])
}
return(new_files)
}
reorder_files2 <- function(files, n){
bad_ordering <- sort(as.character(1:n))
files <- files[order(as.numeric(bad_ordering))]
files
}
reorder_files3 <- function(string_list) {
library(gtools)
sorted_list <- mixedsort(string_list)
return(sorted_list)
}
#files <- reorder_files(files)
files <- reorder_files3(files)
files
rep_num <- 100
keep_frac <- c(0.01, 0.05, 0.1, 0.15, 0.25)
drop_frac <- c(0.05, 0.1, 0.25, 0.5)
mtry_factor <- c(0.5, 1, 2)
p <- c(100, 1000)
n <- c(100)
param_list <- list(keep_frac, drop_frac, mtry_factor, p, n)
param_settings <- expand.grid(param_list)
param_settings <- param_settings[, 5:1]
names(param_settings) <- c("n", "p", "mtry_factor", "drop_fraction", "keep_fraction")
total_sim_settings <- dim(param_settings)[1]
total_sims <- rep_num * total_sim_settings
indices <- get_indices(files)
model_index <- cbind(seq(1, total_sims, by = rep_num), seq(rep_num, total_sims, by = rep_num))
find_model_index <- function(id) {
which(apply(model_index, 1, function(x) {
(id >= x[1]) && (id <= x[2])
} == TRUE))
}
ff_results <- vector("list", total_sim_settings)
runtime_temp <- vector("list", total_sim_settings)
runtime_user <- matrix(nrow = 1, ncol = 1)
runtime_system <- matrix(nrow = 1, ncol = 1)
runtime_total <- matrix(nrow = 1, ncol = 1)
for (i in 1:60) {
if (i <= 60){
ff_results[[i]] <- matrix(0, 100, 2)
}
if (i > 60){
ff_results[[i]] <- matrix(0, 1000, 2)
}
runtime_temp[[i]] <- matrix(0,1,1)
}
eff_error <- 0
q <- 0
for (i in 1:length(files)) {
load(files[i])
id <- indices[i]
current_model <- find_model_index(id)
if (find_model_index(id) > 60){
print(i)
next
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shaps)
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- mean(error)
eff_error <- eff_error + final_error
print(eff_error)
q <- q + 1
print(i)
}
for (i in 1:length(files)) {
load(files[i])
id <- indices[i]
current_model <- find_model_index(id)
if (find_model_index(id) > 60){
print(i)
next
}
shap_obj <- out[[5]]$shap_obj
final_pred <- rowSums(shap_obj$shapley_values) + shap_obj$baseline
predicted_y <- predict(out[[5]]$final_rf, out[[5]]$final_X)
error <- (final_pred - predicted_y)^2
final_error <- mean(error)
eff_error <- eff_error + final_error
print(eff_error)
q <- q + 1
print(i)
}
out[[5]]
out
best_tff_results <- get_best_params(tff_param_settings, tff_results, p = 100, n = 250)
tff_best <- as.matrix(best_tff_results[[2]][,2])
best_taf_results <- get_best_params(taf_param_settings, taf_results, p = 100, n = 250)
taf_best <- as.matrix(best_taf_results[[2]][,2])
load("tree_ff_results.RData")
tff_results <- tree_ff_results[[2]]
load("tree_af_results.RData")
taf_results <- tree_af_results[[2]]
taf_param_settings <- tree_af_results[[1]]
taf_param_settings <- taf_param_settings[1:60, ]
# choose the best result from each result
parameter_settings <- vector("list", 3)
ranking_error <- function(est_prop) {
true_membership <- c(rep(1, 3), 0, rep(1, 3), 0)
out <- mean((true_membership - est_prop)^2)
}
ranking_error2 <- function(est_prop) {
true_membership <- c(rep(1, 3), rep(0, 72), rep(1, 3), rep(0, 22))
out <- mean((true_membership - est_prop)^2)
}
get_best_params <- function(param_settings, results, p) {
p_ind <- which(param_settings$p == p)
rankings <- rep(NA, length(p_ind))
for (i in 1:length(p_ind)) {
rankings[i] <- ranking_error(results[[p_ind[i]]][, "selected_props"])
}
best_rank_ind <- p_ind[which.min(rankings)]
best_param_setting <- param_settings[best_rank_ind, ]
best_result <- results[[best_rank_ind]]
out <- list(param_setting = best_param_setting, result = best_result)
}
get_best_params2 <- function(param_settings, results, p) {
p_ind <- which(param_settings$p == p)
rankings <- rep(NA, length(p_ind))
for (i in 1:length(p_ind)) {
rankings[i] <- ranking_error2(results[[p_ind[i]]][, "selected_props"])
}
best_rank_ind <- p_ind[which.min(rankings)]
best_param_setting <- param_settings[best_rank_ind, ]
best_result <- results[[best_rank_ind]]
out <- list(param_setting = best_param_setting, result = best_result)
}
best_ff_results <- get_best_params(ff_param_settings, ff_results, p = 100)
ff_best <- best_ff_results[[2]]
parameter_settings[[1]] <- best_ff_results[[1]]
best_cif_results <- get_best_params(cif_param_settings, cif_results, p = 100)
cif_best <- best_cif_results[[2]]
parameter_settings[[2]] <- best_cif_results[[1]]
best_rf_results <- get_best_params(rf_param_settings, rf_results, p = 100)
rf_best <- best_rf_results[[2]]
parameter_settings[[3]] <- best_rf_results[[1]]
best_sff_results <- get_best_params(sff_param_settings, sff_results, p = 100)
sff_best <- best_sff_results[[2]]
parameter_settings[[4]] <- best_sff_results[[1]]
best_fff_results <- get_best_params(fff_param_settings, fff_results, p = 100)
fff_best <- best_fff_results[[2]]
parameter_settings[[5]] <- best_fff_results[[1]]
best_aff2_results <- get_best_params(aff2_param_settings, aff2_results, p = 100)
aff2_best <- best_aff2_results[[2]]
parameter_settings[[6]] <- best_aff2_results[[1]]
best_en_results <- get_best_params(en_param_settings, en_results, p = 100)
en_best <- best_en_results[[2]]
parameter_settings[[7]] <- best_en_results[[1]]
best_tff_results <- get_best_params2(tff_param_settings, tff_results, p = 100)
tff_best <- best_tff_results[[2]]
parameter_settings[[8]] <- best_tff_results[[1]]
best_taf_results <- get_best_params2(taf_param_settings, taf_results, p = 100)
taf_best <- best_taf_results[[2]]
parameter_settings[[9]] <- best_taf_results[[1]]
names(parameter_settings) <- c("Tree FFS", "Tree AFS")
results <- as.data.frame(rbind(tff_best, taf_best))
results <- cbind(rep(paste("X", c(1:100), sep = ""), 2), results)
names <- c("Tree FFS", "Tree_AFS")
results <- as.data.frame(rbind(tff_best, taf_best))
results <- cbind(rep(paste("X", c(1:100), sep = ""), 2), results)
results <- cbind(rep(names, each = 100), results)
names(results)[1:2] <- c("Method", "feature")
results[, 3:4] <- round(results[, 3:4], 2)
results[, 2] <- as.factor(results[, 2])
results[, 1] <- as.factor(results[, 1])
results[, 1] <- factor(results[,1], levels(results[, 1])[c(1,2)])
p <- ggplot(results, aes(x = feature, y = selected_props, colour = Method, group = Method)) +
geom_line(size = 1.1)
p <- p + geom_point(size = 5, alpha = 0.8) + labs(x = "Feature", y = "Proportion of Times Feature was Selected",
title = "Feature Selection Performance n=100, p=100") + geom_line(size = 2, alpha = 0.8)
p <- p + theme(plot.title = element_text(hjust = 0.5))
pdf("lm_p100plot_treeall.pdf", width = 8.2)
plot(p)
dev.off()
pdf("lm_p100plot_treeall.pdf", width = 50)
plot(p)
dev.off()
library(devtools)
library(roxygen2)
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
setwd("./shapff")
document()
devtools::install_github("timothyshen213/shapff")
