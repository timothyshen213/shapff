screen_min_ntree <- screen_control$min_ntree
cat("Screening Step ... \n")
out <- shapff(X, y, Z, shap_model, shap_type, module_membership,
screen_control, select_control, final_ntree,
num_processors, nodesize=nodesize,
test_features=test_features, test_y=test_y)
out$WGCNA_object <- bwise
return(out)
}
if (!is.numeric(X)) {
X <- as.matrix(X)
X <- apply(X, 2, as.numeric)
}
X <- as.data.frame(X)
y <- train_data$V501
y <- factor(y, levels = c(-1, 1), labels = c("negative", "positive"))
important_columns <- c(476, 242, 337, 65, 129, 106, 339, 49, 379, 443, 473, 454, 494)
important_columns <- paste0("V", important_columns)
X <- X %>%
rename_with(~ paste0("imp_", gsub("V", "", .)), all_of(important_columns))
dynamicColors <- labels2colors(dynamicMods$colors)
geneTree <- dynamicMods$dendrograms[[1]]
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
module_info <- data.frame(gene = colnames(X), module = dynamicColors)
if (!is.numeric(X)) {
X <- as.matrix(X)
X <- apply(X, 2, as.numeric)
}
X <- as.data.frame(X)
y <- train_data$V501
y <- factor(y, levels = c(-1, 1), labels = c("negative", "positive"))
important_columns <- c(476, 242, 337, 65, 129, 106, 339, 49, 379, 443, 473, 454, 494)
important_columns <- paste0("V", important_columns)
X <- X %>%
rename_with(~ paste0("imp_", gsub("V", "", .)), all_of(important_columns))
#| label: load-packages
library(dplyr)
library(WGCNA)
library(Rfast)
library(shapff)
library(randomForest) # remove later
library(fuzzyforest) # remove later
library(fastshap) # remove later
library(ggplot2) # remove later
library(reshape2)
options(stringsAsFactors = FALSE)
train_data <- read.table("./MADELON/madelon_train.data", header = FALSE, sep = " ")
train_labels <- scan("./MADELON/madelon_train.labels", what = numeric())
train_data$V501 <- train_labels
X <- train_data[,-501]
y <- train_data$V501
cor_matrix <- cor(X)
cor_df <- as.data.frame(as.table(cor_matrix))
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
cor_df <- cor_df[!duplicated(t(apply(cor_df, 1, sort))), ]
top_correlations <- cor_df[order(-abs(cor_df$Freq)), ][1:20, ]
top_features <- unique(c(top_correlations$Var1, top_correlations$Var2))
sub_cor_matrix <- cor_matrix[top_features, top_features]
sub_cor_df <- as.data.frame(as.table(sub_cor_matrix))
ggplot(sub_cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1),
name="Correlation") +
labs(title = "Correlation Matrix of Top 20 Features",
x = "Features",
y = "Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(Freq, 2)), color = "black", size = 2)
if (!is.numeric(X)) {
X <- as.matrix(X)
X <- apply(X, 2, as.numeric)
}
X <- as.data.frame(X)
y <- train_data$V501
y <- factor(y, levels = c(-1, 1), labels = c("negative", "positive"))
important_columns <- c(476, 242, 337, 65, 129, 106, 339, 49, 379, 443, 473, 454, 494)
important_columns <- paste0("V", important_columns)
X <- X %>%
rename_with(~ paste0("imp_", gsub("V", "", .)), all_of(important_columns))
screen_params <- screen_control(min_ntree = 500)
select_params <- select_control(number_selected = 10, drop_fraction = 0.1, ntree_factor = 2, min_ntree = 500)
wgcna_params <- WGCNA_control(power = 8, minModuleSize = 10, deepSplit = 4, detectCutHeight = 2, mergeCutHeight = 0.1,
minCoreKME = 0.1, minCoreKMESize = 10/4, minKMEtoStay = 0.1, pamRespectsDendro = FALSE)
madelon_ff <- shapwff(X, y, WGCNA_params = wgcna_params,
select_params = select_params,
screen_params = screen_params,
num_processors = 1, nodesize = 1)
remove.packages("shapff")
devtools::install_github("timothyshen213/shapff")
detach("package:shapff", unload = TRUE)
remove.packages("shapff")
devtools::install_github("timothyshen213/shapff")
#| label: load-packages
library(dplyr)
library(WGCNA)
library(Rfast)
library(shapff)
library(randomForest) # remove later
library(fuzzyforest) # remove later
library(fastshap) # remove later
library(ggplot2) # remove later
library(reshape2)
options(stringsAsFactors = FALSE)
train_data <- read.table("./MADELON/madelon_train.data", header = FALSE, sep = " ")
train_labels <- scan("./MADELON/madelon_train.labels", what = numeric())
train_data$V501 <- train_labels
X <- train_data[,-501]
y <- train_data$V501
cor_matrix <- cor(X)
cor_df <- as.data.frame(as.table(cor_matrix))
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
cor_df <- cor_df[!duplicated(t(apply(cor_df, 1, sort))), ]
top_correlations <- cor_df[order(-abs(cor_df$Freq)), ][1:20, ]
top_features <- unique(c(top_correlations$Var1, top_correlations$Var2))
sub_cor_matrix <- cor_matrix[top_features, top_features]
sub_cor_df <- as.data.frame(as.table(sub_cor_matrix))
ggplot(sub_cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1),
name="Correlation") +
labs(title = "Correlation Matrix of Top 20 Features",
x = "Features",
y = "Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(Freq, 2)), color = "black", size = 2)
#| label: load-packages
library(dplyr)
library(WGCNA)
library(Rfast)
library(ggplot2)
library(shapff)
library(randomForest) # remove later
library(fuzzyforest) # remove later
library(fastshap) # remove later
library(ggplot2) # remove later
library(reshape2)
options(stringsAsFactors = FALSE)
train_data <- read.table("./MADELON/madelon_train.data", header = FALSE, sep = " ")
train_labels <- scan("./MADELON/madelon_train.labels", what = numeric())
train_data$V501 <- train_labels
X <- train_data[,-501]
y <- train_data$V501
cor_matrix <- cor(X)
cor_df <- as.data.frame(as.table(cor_matrix))
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
cor_df <- cor_df[!duplicated(t(apply(cor_df, 1, sort))), ]
top_correlations <- cor_df[order(-abs(cor_df$Freq)), ][1:20, ]
top_features <- unique(c(top_correlations$Var1, top_correlations$Var2))
sub_cor_matrix <- cor_matrix[top_features, top_features]
sub_cor_df <- as.data.frame(as.table(sub_cor_matrix))
ggplot(sub_cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1),
name="Correlation") +
labs(title = "Correlation Matrix of Top 20 Features",
x = "Features",
y = "Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(Freq, 2)), color = "black", size = 2)
ina <- ifelse(y == -1, 1, 2)
tt <- ttests(X, ina = ina)[,2]
tt.adjusted <- p.adjust(tt, method = "holm")
tt.relevant <- which(tt.adjusted < 0.05)
tt.relevant.ordered <- tt.relevant[order(tt.adjusted[tt.relevant])]
tt_results <- data.frame(
Index = tt.relevant.ordered,
Adjusted_P_Value = tt.adjusted[tt.relevant.ordered]
)
tt_results
gsg <- goodSamplesGenes(X, verbose = 3)
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0) {
X <- X[, gsg$goodGenes]
}
if (sum(!gsg$goodSamples) > 0) {
X <- X[gsg$goodSamples, ]
}
}
powers <- c(1:20)
sft <- pickSoftThreshold(X, powerVector = powers, verbose = 5)
par(mfrow = c(1, 2))
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n", main = "Scale Free Topology")
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = 0.9, col = "red")
plot(sft$fitIndices[, 1], sft$fitIndices[, 5],
xlab = "Soft Threshold (power)", ylab = "Mean Connectivity",
type = "n", main = "Mean Connectivity vs. Soft Threshold")
text(sft$fitIndices[, 1], sft$fitIndices[, 5],
labels = powers, cex = 0.9, col = "red")
dissTOM <- as.dist(1 - cor(X))
dendro_data <- hclust(dissTOM, method = "average")
if (!is.numeric(X)) {
X <- as.matrix(X)
X <- apply(X, 2, as.numeric)
}
minModuleSize <- 10
power_value <- 8
cutHeight <- 2
deepSplit <- 4
dynamicMods <- blockwiseModules(X, power = power_value, minModuleSize = minModuleSize, deepSplit = deepSplit,
detectCutHeight  = cutHeight, mergeCutHeight = 0.1, minCoreKME = 0.1, minCoreKMESize = minModuleSize/4,
minKMEtoStay = 0.1, pamRespectsDendro = FALSE, saveTOMs = TRUE, verbose = 5)
dynamicColors <- labels2colors(dynamicMods$colors)
geneTree <- dynamicMods$dendrograms[[1]]
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
module_info <- data.frame(gene = colnames(X), module = dynamicColors)
table(dynamicColors)
if (!is.numeric(X)) {
X <- as.matrix(X)
X <- apply(X, 2, as.numeric)
}
X <- as.data.frame(X)
y <- train_data$V501
y <- factor(y, levels = c(-1, 1), labels = c("negative", "positive"))
important_columns <- c(476, 242, 337, 65, 129, 106, 339, 49, 379, 443, 473, 454, 494)
important_columns <- paste0("V", important_columns)
X <- X %>%
rename_with(~ paste0("imp_", gsub("V", "", .)), all_of(important_columns))
screen_params <- screen_control(min_ntree = 500)
select_params <- select_control(number_selected = 10, drop_fraction = 0.1, ntree_factor = 2, min_ntree = 500)
wgcna_params <- WGCNA_control(power = 8, minModuleSize = 10, deepSplit = 4, detectCutHeight = 2, mergeCutHeight = 0.1,
minCoreKME = 0.1, minCoreKMESize = 10/4, minKMEtoStay = 0.1, pamRespectsDendro = FALSE)
madelon_ff <- shapwff(X, y, WGCNA_params = wgcna_params,
select_params = select_params,
screen_params = screen_params,
num_processors = 1, nodesize = 1)
#| label: load-packages
#| warning: false
library(dplyr)
library(WGCNA)
library(Rfast)
library(ggplot2)
library(reshape2)
library(shapff)
library(fuzzyforest)
library(randomForest)
library(fastshap) # remove later
options(stringsAsFactors = FALSE)
datatable(madelon_ff$final_SHAP)
library(data.table)
library(data.table)
datatable(madelon_ff$final_SHAP)
#| label: load-packages
#| warning: false
library(dplyr)
library(DT)
library(WGCNA)
library(Rfast)
library(ggplot2)
library(reshape2)
library(shapff)
library(fuzzyforest)
library(randomForest)
library(fastshap) # remove later
options(stringsAsFactors = FALSE)
datatable(madelon_ff$final_SHAP)
plot_importance(madelon_ff)
plot_decisions(madelon_ff)
#| warning: false
plot_decisions(madelon_ff)
plot_modules(madelon_ff)
madelon_ff <- wff(X, y, select_params = select_params,
screen_params = screen_params, num_processors = 1)
madelon_ff <- wff(X, y, WGCNA_params = wgcna_params,
select_params = select_params,
screen_params = screen_params,
num_processors = 1, nodesize = 1)
datatable(madelon_ff$feature_list)
modplot(madelon_ff)
rf_model <- randomForest(y=y, x= X, importance = TRUE)
importance_scores <- importance(rf_model)
importance_df <- data.frame(Feature = rownames(importance_scores), Importance = importance_scores[, "IncNodePurity"])
importance_scores
rf_model <- randomForest(y=y, x= X, importance = TRUE)
rf_model <- randomForest(y=y, x= X, importance = TRUE)
importance_scores <- importance(rf_model)
importance_df <- data.frame(Feature = rownames(importance_scores), Importance = importance_scores[, "MeanDecreaseAccuracy"])
importance_df <- importance_df %>%
arrange(desc(Importance))
datatable(head(importance_df, 10))
cor_matrix <- cor(X)
cor_df <- as.data.frame(as.table(cor_matrix))
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
cor_df <- cor_df[!duplicated(t(apply(cor_df, 1, sort))), ]
top_correlations <- cor_df[order(-abs(cor_df$Freq)), ][1:20, ]
top_features <- unique(c(top_correlations$Var1, top_correlations$Var2))
sub_cor_matrix <- cor_matrix[top_features, top_features]
sub_cor_df <- as.data.frame(as.table(sub_cor_matrix))
ggplot(sub_cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1),
name="Correlation") +
labs(title = "Correlation Matrix of Top 20 Features",
x = "Features",
y = "Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(Freq, 2)), color = "black", size = 2)
cor_matrix <- cor(X)
cor_df <- as.data.frame(as.table(cor_matrix))
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
cor_df <- cor_df[!duplicated(t(apply(cor_df, 1, sort))), ]
top_correlations <- cor_df[order(-abs(cor_df$Freq)), ][1:20, ]
top_features <- unique(c(top_correlations$Var1, top_correlations$Var2))
sub_cor_matrix <- cor_matrix[top_features, top_features]
sub_cor_df <- as.data.frame(as.table(sub_cor_matrix))
p <- ggplot(sub_cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1),
name="Correlation") +
labs(title = "Correlation Matrix of Top 20 Features",
x = "Features",
y = "Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(Freq, 2)), color = "black", size = 2)
print(p)
p
cor_matrix <- cor(X)
cor_df <- as.data.frame(as.table(cor_matrix))
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
cor_df <- cor_df[!duplicated(t(apply(cor_df, 1, sort))), ]
top_correlations <- cor_df[order(-abs(cor_df$Freq)), ][1:20, ]
top_features <- unique(c(top_correlations$Var1, top_correlations$Var2))
sub_cor_matrix <- cor_matrix[top_features, top_features]
sub_cor_df <- as.data.frame(as.table(sub_cor_matrix))
ggplot(sub_cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1),
name="Correlation") +
labs(title = "Correlation Matrix of Top 20 Features",
x = "Features",
y = "Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(Freq, 2)), color = "black", size = 2)
ina <- ifelse(y == -1, 1, 2)
tt <- ttests(X, ina = ina)[,2]
#| warning: TRUE
cor_matrix <- cor(X)
cor_df <- as.data.frame(as.table(cor_matrix))
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
cor_df <- cor_df[!duplicated(t(apply(cor_df, 1, sort))), ]
top_correlations <- cor_df[order(-abs(cor_df$Freq)), ][1:20, ]
top_features <- unique(c(top_correlations$Var1, top_correlations$Var2))
sub_cor_matrix <- cor_matrix[top_features, top_features]
sub_cor_df <- as.data.frame(as.table(sub_cor_matrix))
ggplot(sub_cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1),
name="Correlation") +
labs(title = "Correlation Matrix of Top 20 Features",
x = "Features",
y = "Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(Freq, 2)), color = "black", size = 2)
ina <- ifelse(y == -1, 1, 2)
tt <- ttests(X, ina = ina)[,2]
#| warning: false
train_data <- read.table("./MADELON/madelon_train.data", header = FALSE, sep = " ")
train_labels <- scan("./MADELON/madelon_train.labels", what = numeric())
train_data$V501 <- train_labels
X <- train_data[,-501]
y <- train_data$V501
#| warning: TRUE
cor_matrix <- cor(X)
cor_df <- as.data.frame(as.table(cor_matrix))
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
cor_df <- cor_df[!duplicated(t(apply(cor_df, 1, sort))), ]
top_correlations <- cor_df[order(-abs(cor_df$Freq)), ][1:20, ]
top_features <- unique(c(top_correlations$Var1, top_correlations$Var2))
sub_cor_matrix <- cor_matrix[top_features, top_features]
sub_cor_df <- as.data.frame(as.table(sub_cor_matrix))
ggplot(sub_cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1),
name="Correlation") +
labs(title = "Correlation Matrix of Top 20 Features",
x = "Features",
y = "Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = round(Freq, 2)), color = "black", size = 2)
ina <- ifelse(y == -1, 1, 2)
tt <- ttests(X, ina = ina)[,2]
tt.adjusted <- p.adjust(tt, method = "holm")
tt.relevant <- which(tt.adjusted < 0.05)
tt.relevant.ordered <- tt.relevant[order(tt.adjusted[tt.relevant])]
tt_results <- data.frame(
Index = tt.relevant.ordered,
Adjusted_P_Value = tt.adjusted[tt.relevant.ordered]
)
tt_results
library(devtools)
library(roxygen2)
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
setwd("./shapff")
document()
devtools::install_github("timothyshen213/shapff")
library(shapff)
data("femData")
data("Liver_Exp")
data(liverExp)
data("liverExp")
#| label: load-packages
#| warning: false
library(WGCNA)
library(shapff)
library(fuzzyforest) # remove later
library(randomForest) # remove later
library(fastshap) # remove later
#| warning: false
library(DT)
library(dplyr)
library(purrr)
library(reshape2)
library(ggplot2)
library(flashClust) # needed for WGCNA preprocessing
femData <- data("femData")
# if via raw data
# femData <- read.csv("LiverFemale3600.csv", stringsAsFactors = FALSE)
predictors <- data.frame(predictors = names(femData))
datatable(predictors)
datExp0 <- as.data.frame(t(femData[, -c(1:8)]))
femData <- data("femData")
# if via raw data
# femData <- read.csv("LiverFemale3600.csv", stringsAsFactors = FALSE)
data("femData")
femData <- data("femData")
femData <- data("femData")
# if via raw data
# femData <- read.csv("LiverFemale3600.csv", stringsAsFactors = FALSE)
```
data("femData")
predictors <- data.frame(predictors = names(femData))
datatable(predictors)
datExp0 <- as.data.frame(t(femData[, -c(1:8)]))
names(datExp0) <- femData$substanceBXH
rownames(datExp0) <- names(femData)[-c(1:8)]
gsg <- goodSamplesGenes(datExp0, verbose = 3)
gsg$allOK
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0)
printFlush(paste("Removing genes:", paste(names(datExp0)[!gsg$goodGenes],
collapse = ", ")))
if (sum(!gsg$goodSamples) > 0)
printFlush(paste("Removing samples:", paste(rownames(datExp0)[!gsg$goodSamples],
collapse = ", ")))
datExp0 <- datExp0[gsg$goodSamples, gsg$goodGenes]
}
sampleTree <- flashClust(dist(datExp0), method = "average")
sizeGrWindow(12, 9)
par(cex = 0.6)
par(mar = c(0, 4, 2, 0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub = "", xlab = "",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
abline(h = 15, col = "red")
clust <- cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
keepSamples <- (clust == 1)
datExp <- datExp0[keepSamples, ]
nGenes <- ncol(datExp)
nSamples <- nrow(datExp)
traitData <- data(traitData)
# if via raw data
# traitData <- read.csv("ClinicalTraits.csv")
predictors <- data.frame(predictors = names(traitData))
datatable(predictors)
allTraits <- traitData[, -c(31, 16)]
data(traitData)
data("traitData")
data("traitData")
# if via raw data
# traitData <- read.csv("ClinicalTraits.csv")
predictors <- data.frame(predictors = names(traitData))
datatable(predictors)
allTraits <- traitData[, -c(31, 16)]
allTraits <- allTraits[, c(2, 11:36)]
predictors <- data.frame(predictors = names(allTraits))
datatable(predictors)
femaleSamples <- rownames(datExp)
traitRows <- match(femaleSamples, allTraits$Mice)
datTraits <- allTraits[traitRows, -1]
rownames(datTraits) <- allTraits[traitRows, 1]
# to skip data preprocessing:
data(liverExp)
# to skip data preprocessing:
data("Liver_Exp")
# to skip data preprocessing:
# data("Liver_Exp")
Liver_Exp <- final_Liver_Exp
getwd()
setwd("./vignettes")
devtools::build_vignettes()
