% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shapff_fit.R
\name{shapwff}
\alias{shapwff}
\title{Runs shapley forest algorithm along with WGCNA}
\usage{
shapwff(
  X,
  y,
  Z = NULL,
  shap_model = "full",
  WGCNA_params = WGCNA_control(p = 6),
  min_features = 20,
  verbose = 1,
  debug = 2,
  initial = TRUE,
  screen_params = fuzzyforest:::screen_control(min_ntree = 5000),
  select_params = fuzzyforest:::select_control(min_ntree = 5000),
  final_ntree = 500,
  num_processors,
  parallel = 1,
  nodesize,
  test_features = NULL,
  test_y = NULL,
  nsim = 1,
  final_nsim = 100
)
}
\arguments{
\item{X}{A data.frame. where each column represents a
feature vector.}

\item{y}{Response vector. If performing classification, \code{y} should
be a factor. If performing regression, \code{y}
should be numeric vector.}

\item{Z}{A data.frame of additional features that will bypass
the screening step.}

\item{shap_model}{Binary indicator for \code{shapff} model. If \code{full}, \code{shapff}
runs SHAPley values at both screening and selection step.
If \code{after}, \code{shapff} model runs SHAPley values at the end
of final model and keeps permutation VIMs usage at other steps.
\code{1} is default.}

\item{WGCNA_params}{WGCNA parameters.
See \code{\link[WGCNA]{blockwiseModules}} and
\code{\link[fuzzyforest]{WGCNA_control}} for details.
\code{WGCNA_params} is an object of type
\code{WGCNA_control}.}

\item{min_features}{Defines minimum feature allowed for each module. If \code{debug} is
not \code{-1}, modules below \code{min_features} will only keep non-zero
important features during each Recursive Feature Elimination
iteration}

\item{verbose}{Defines the warning message protocol. If \code{0}, no warning or UI
will be displayed. If \code{1}, warnings and UI progress bar will
be displayed.}

\item{debug}{Sets the debugging procedures. If \code{-1}, all debugging functions
will be bypassed. If \code{0}, debugging at the WGCNA will be bypassed.
Note for \code{shapff}, \code{0} has no effect. If \code{1}, debugging during
Recursive Feature Elimination at both screening and selection step
will be bypassed. If \code{2}, all debugging functions will be ran. Below
are the debugging features. Debugging at WGCNA detects if each module
is below the \code{min_features}. Debugging at RFE will keep only
non zero important feature at each elimination step for modules below
\code{min_features}.}

\item{initial}{Binary indicator to print out initial screening step results (ie the
results from the first Recursive Feature Elimination at the screening
step for each module). If \code{True}, \code{shapff} will pause after RFE
allowing users to select output method for initial screening. If \code{False},
it will bypass all initial screening procedure.}

\item{screen_params}{Defines the parameter settings for the screening step
of \link[fuzzyforest]{fuzzyforest}.
See \code{\link[fuzzyforest]{screen_control}} for
details. \code{screen_params} is an object of type
\code{screen_control}.}

\item{select_params}{Defines the parameter setting for the selection step
of \link[fuzzyforest]{fuzzyforest}.
See \code{\link[fuzzyforest]{select_control}} for details.
\code{select_params} is an object of type
\code{select_control}.}

\item{final_ntree}{The number of trees grown in the final random forest in
the selection step. This random forest contains all
the surviving features.}

\item{num_processors}{Number of processors used to run random forests.}

\item{parallel}{Type of parellization to be used. \code{1} if
\code{\link[doParallel]{doParallel}}. \code{2} if
\code{\link[doSNOW]{doSNOW}}. \code{1} is the default.}

\item{nodesize}{Minimum terminal nodesize. 1 if classification.
5 if regression.  If the sample size is very large,
the trees will be grown extremely deep.
This may lead to issues with memory usage and may
lead to significant increases in the time it takes
the algorithm to run. In this case,
it may be useful to increase \code{nodesize}.}

\item{test_features}{A data.frame containing features from a test set.
The data.frame should contain the features in both
X and Z. Used during final Random Forest call (after
screening and selection step).}

\item{test_y}{The responses for the test set. Used during final Random
Forest call (after screening and selection step).}

\item{nsim}{Number of Monte Carlo repetitions for estimating SHAP
values in the screening step. Default is \code{1}. Increasing
\code{nsim} leads to more accurate results, but at the cost
of computational cost.}

\item{final_nsim}{Number of Monte Carlo repetitions for estimating SHAP
values in the selection step. Default is \code{1}. \code{final_nsim}
should be as large as feasibly possible.}

\item{module_membership}{A vector that specifies the module membership for each
each feature. See \code{shapwff} for possible method.}
}
\value{
Returns an object of type fuzzy_forest, which is a list containing the essential
output of fuzzy forests, including a data.frame of selected features and the random forest
model fitted using those features.
}
\description{
Runs a weighted gene correlated network analysis. Then runs shapley forest
algorithm for feature importance through the use of SHAPley values.
}
\examples{
TODO

}
\references{
Leo Breiman (2001). Random Forests. Machine Learning, 45(1), 5-32.

Lundberg, S. M., & Lee, S. I. (2017). A unified approach to interpreting model predictions. Advances in neural information processing systems, 30.

Daniel Conn, Tuck Ngun, Christina M. Ramirez (2015). Fuzzy Forests: a New
WGCNA Based Random Forest Algorithm for Correlated, High-Dimensional Data,
Journal of Statistical Software, Manuscript in progress.

Bin Zhang and Steve Horvath (2005) "A General Framework for Weighted Gene
Co-Expression Network Analysis", Statistical Applications in Genetics and
Molecular Biology: Vol. 4: No. 1, Article 17
}
